!classDefinition: #CartTest category: #TusLibros!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory createCart isEmpty! !

!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty ! !

!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !

!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !

!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !


!CartTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 18:09'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !


!classDefinition: #CashierTest category: #TusLibros!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:50'!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !

!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51'!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51'!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !

!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04'!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00'!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:59'!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !


!CashierTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 19:03'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !


!CashierTest methodsFor: 'merchant processor protocol' stamp: 'HernanWilkinson 6/17/2013 19:02'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !


!classDefinition: #TusLibrosRestInterfaceTest category: #TusLibros!
TestCase subclass: #TusLibrosRestInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!TusLibrosRestInterfaceTest methodsFor: 'set up' stamp: 'Luis 6/17/2018 17:47:38'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

!TusLibrosRestInterfaceTest methodsFor: 'set up' stamp: 'Luis 6/17/2018 17:47:12'!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].! !


!TusLibrosRestInterfaceTest methodsFor: 'testing' stamp: 'Luis 6/17/2018 15:35:04'!
test01CreateCartWithValidData

	| interface cart|.
	interface _ TusLibrosRestInterface new initializeWith: (testObjectsFactory defaultCatalog).
	
	cart _ interface createCartwith:'Usuario Valido' and:'Contraseña Valida'.
	
	self assert: cart = 1 .
	! !

!TusLibrosRestInterfaceTest methodsFor: 'testing' stamp: 'Luis 6/17/2018 15:35:16'!
test02CreateTwoCarts

	| interface cart1 cart2|.
	interface _ TusLibrosRestInterface new initializeWith: (testObjectsFactory defaultCatalog).
	
	cart1 _ interface createCartwith:'Usuario Valido' and:'Contraseña Valida'.
	cart2 _ interface createCartwith:'Usuario Valido' and:'Contraseña Valida'.
	
	self assert: cart1 = 1 .
	self assert: cart2 = 2 .
	! !

!TusLibrosRestInterfaceTest methodsFor: 'testing' stamp: 'Luis 6/17/2018 15:35:23'!
test03CannotCreateCartWithInvalidPassword

	| interface |.
	interface _ TusLibrosRestInterface new initializeWith: (testObjectsFactory defaultCatalog).
	
		self 
		should: [interface createCartwith:'Usuario Valido' and:'Contraseña Invalida'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = TusLibrosRestInterface invalidPasswordErrorMessage.
			].
	


	
	

	! !

!TusLibrosRestInterfaceTest methodsFor: 'testing' stamp: 'Luis 6/17/2018 15:35:34'!
test04CannotCreateCartWithInvalidUser

	| interface |.
	interface _ TusLibrosRestInterface new initializeWith: (testObjectsFactory defaultCatalog).
	
		self 
		should: [interface createCartwith:'Usuario Invalido' and:'Contraseña Invalida'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = TusLibrosRestInterface invalidUserErrorMessage.
			].
	


	
	

	! !

!TusLibrosRestInterfaceTest methodsFor: 'testing' stamp: 'Luis 6/17/2018 15:35:42'!
test05ListEmptyCart

	| interface cart |.
	interface _ TusLibrosRestInterface new initializeWith: (testObjectsFactory defaultCatalog).
	cart _ interface createCartwith:'Usuario Valido' and:'Contraseña Valida'.
	
	self assert: (interface listCart: cart) = nil.
	
	
	
	
	

	


	
	

	! !

!TusLibrosRestInterfaceTest methodsFor: 'testing' stamp: 'Luis 6/17/2018 15:35:48'!
test06CanAddToCartWithValidData

	| interface cart |.
	interface _ TusLibrosRestInterface new initializeWith: (testObjectsFactory defaultCatalog).
	cart _ interface createCartwith:'Usuario Valido' and:'Contraseña Valida'.
	interface addToCart:cart  ISBN:'validBook'  Quantity:1. 

	 
	self assert: ((interface getActiveCarts at:cart) includes:testObjectsFactory itemSellByTheStore).
	self assert: ((interface getActiveCarts at:cart) occurrencesOf: (testObjectsFactory itemSellByTheStore)) = 1 .


	

	


	
	

	! !

!TusLibrosRestInterfaceTest methodsFor: 'testing' stamp: 'Luis 6/17/2018 15:35:54'!
test07ListNotEmptyCart

	| interface cart |.
	interface _ TusLibrosRestInterface new initializeWith: (testObjectsFactory defaultCatalog).
	cart _ interface createCartwith:'Usuario Valido' and:'Contraseña Valida'.
	(interface getActiveCarts at:cart) add:'validBook'.

	 
	self assert: ((interface getActiveCarts at:cart) includes:testObjectsFactory itemSellByTheStore).
	self assert: ((interface getActiveCarts at:cart) occurrencesOf: (testObjectsFactory itemSellByTheStore)) = 1 .


	

	


	
	

	! !

!TusLibrosRestInterfaceTest methodsFor: 'testing' stamp: 'L 6/17/2018 19:14:35'!
test08CheckoutCartReturnsTransactionID

	| interface cart |.
	interface _ TusLibrosRestInterface new initializeWith: (testObjectsFactory defaultCatalog).
	cart _ interface createCartwith:'Usuario Valido' and:'Contraseña Valida'.
	(interface getActiveCarts at:cart) add:'validBook'.

	 
	self assert: ((interface getActiveCarts at:cart) includes:testObjectsFactory itemSellByTheStore).
	self assert: ((interface getActiveCarts at:cart) occurrencesOf: (testObjectsFactory itemSellByTheStore)) = 1 .


	

	


	
	

	! !


!classDefinition: #Cart category: #TusLibros!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !

!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !


!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 18:06'!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !


!Cart methodsFor: 'initialization' stamp: 'ABC 6/14/2018 21:40:41'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !


!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !


!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !

!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !


!Cart methodsFor: 'total' stamp: 'HernanWilkinson 6/17/2013 19:09'!
total

	^ items sum: [ :anItem | catalog at: anItem ]! !


!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !


!Cart methodsFor: 'as yet unclassified' stamp: 'ABC 6/14/2018 21:03:05'!
itemsAsSet

	| result |.
	result _ items asSet .
	^ result .! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Cart class' category: #TusLibros!
Cart class
	instanceVariableNames: ''!

!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !


!classDefinition: #Cashier category: #TusLibros!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:08'!
calculateTotal

	total := cart total.
	! !

!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:07'!
createSale

	^ Sale of: total
! !

!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:06'!
debitTotal

	merchantProcessor debit: total from: creditCard.
	! !

!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:06'!
registerSale

	salesBook add: self createSale! !


!Cashier methodsFor: 'checkout' stamp: 'HernanWilkinson 6/17/2013 19:06'!
checkOut

	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total! !


!Cashier methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:53'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Cashier class' category: #TusLibros!
Cashier class
	instanceVariableNames: ''!

!Cashier class methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 18:22'!
assertIsNotEmpty: aCart 
	
	aCart isEmpty ifTrue: [self error: self cartCanNotBeEmptyErrorMessage ]! !

!Cashier class methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 18:23'!
assertIsNotExpired: aCreditCard on: aDate
	
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self canNotChargeAnExpiredCreditCardErrorMessage ]! !


!Cashier class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:51'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !


!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 18:21'!
canNotChargeAnExpiredCreditCardErrorMessage
	
	^'Can not charge an expired credit card'! !

!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:56'!
cartCanNotBeEmptyErrorMessage
	
	^'Can not check out an empty cart'! !

!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 19:02'!
creditCardHasNoCreditErrorMessage
	
	^'Credit card has no credit'! !


!classDefinition: #CreditCard category: #TusLibros!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!CreditCard methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 18:39'!
isExpiredOn: aDate 
	
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !


!CreditCard methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:38'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'CreditCard class' category: #TusLibros!
CreditCard class
	instanceVariableNames: ''!

!CreditCard class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:38'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth! !


!classDefinition: #Sale category: #TusLibros!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!Sale methodsFor: 'total' stamp: 'HernanWilkinson 6/17/2013 18:48'!
total
	
	^ total! !


!Sale methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:47'!
initializeTotal: aTotal

	total := aTotal ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Sale class' category: #TusLibros!
Sale class
	instanceVariableNames: ''!

!Sale class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:47'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ! !


!classDefinition: #StoreTestObjectsFactory category: #TusLibros!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemNotSellByTheStore
	
	^'invalidBook'! !

!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemSellByTheStore
	
	^ 'validBook'! !

!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemSellByTheStorePrice
	
	^10! !


!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2013 18:08'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !

!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2013 18:08'!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !


!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'HernanWilkinson 6/17/2013 18:37'!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'HernanWilkinson 6/17/2013 18:36'!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !


!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:37'!
initialize

	today := DateAndTime now! !


!StoreTestObjectsFactory methodsFor: 'date' stamp: 'HernanWilkinson 6/17/2013 18:37'!
today
	
	^ today! !


!classDefinition: #TusLibrosRestInterface category: #TusLibros!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: 'cartIdCounter activeCarts catalog transactionIDCounter ListOfPurchasesByClient lastActivityTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!TusLibrosRestInterface methodsFor: 'private-testing' stamp: 'Luis 6/17/2018 17:49:34'!
setCart:aCart lastActiveTime:aTime

	lastActivityTime at:aCart put:aTime .! !


!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'L 6/17/2018 18:59:40'!
initializeWith:aCatalog

	cartIdCounter _ 0.
	transactionIDCounter _ 0.	
	activeCarts _ Dictionary new.
	catalog _ aCatalog .
	lastActivityTime _ Dictionary new.! !


!TusLibrosRestInterface methodsFor: 'public methos' stamp: 'L 6/17/2018 19:04:18'!
addToCart:aCartID ISBN:aISBN Quantity:aNumber

	self assertValidCartID: aCartID .
	self assertCart:aCartID isAlive:DateAndTime now.

	(self getCart: aCartID ) add:aNumber of:aISBN .
	self setCart: aCartID lastActiveTime: DateAndTime now.! !

!TusLibrosRestInterface methodsFor: 'public methos' stamp: 'L 6/17/2018 19:07:17'!
checkoutCart:aCartId withThisCreditCard:aCreditCardNumber expires:aExpirationDate name:aName currentTime:aTime andProcessor:aProcessor xx:anSalesbook
	
	|localCashier|.
	self assertValidCartID:aCartId.
	self assertCart: aCartId isAlive: DateAndTime now.
	localCashier _
	 Cashier toCheckout: ((self getActiveCarts) at:aCartId) 
	charging: aExpirationDate  
	throught:aProcessor  
	on:  aTime 
	registeringOn: anSalesbook.
	
	localCashier checkOut .
	transactionIDCounter _ transactionIDCounter + 1.
	activeCarts removeKey:aCartId .
	^ transactionIDCounter .! !

!TusLibrosRestInterface methodsFor: 'public methos' stamp: 'L 6/17/2018 19:03:03'!
createCartwith: anUserName and: aPassword
	anUserName = 'Usuario Valido' ifFalse: [ ^ self error: TusLibrosRestInterface invalidUserErrorMessage ].
	aPassword = 'Contraseña Valida' ifFalse: [ ^ self error: TusLibrosRestInterface invalidPasswordErrorMessage ].
	cartIdCounter _ cartIdCounter + 1.
	activeCarts add: cartIdCounter ->(Cart new initializeAcceptingItemsOf: catalog).
	lastActivityTime add:cartIdCounter -> DateAndTime now .
	^ cartIdCounter.! !

!TusLibrosRestInterface methodsFor: 'public methos' stamp: 'Luis 6/17/2018 17:55:34'!
listCart:aCartID

	self assertValidCartID: aCartID.
	self assertCart: aCartID isAlive: DateAndTime now.
		
	^ nil. 
	
	
	
	


	! !

!TusLibrosRestInterface methodsFor: 'public methos' stamp: 'L 6/17/2018 19:04:43'!
listPurchases:aClientID with:aPassword


	
	
	! !


!TusLibrosRestInterface methodsFor: 'assertions' stamp: 'Luis 6/17/2018 17:56:22'!
assertCart: aCartID isAlive:aTime
	^ true.! !

!TusLibrosRestInterface methodsFor: 'assertions' stamp: 'Luis 6/17/2018 18:03:11'!
assertValid:aUsername andPassword:aPassword

	^ true.! !

!TusLibrosRestInterface methodsFor: 'assertions' stamp: 'Luis 6/17/2018 17:41:07'!
assertValidCartID:aCartId

	(aCartId > cartIdCounter ) ifTrue: [^self error: self invalidCartID ].! !


!TusLibrosRestInterface methodsFor: 'errorMessages' stamp: 'Luis 6/17/2018 17:40:39'!
invalidCartID

	^' The CartID provided is invalid'! !


!TusLibrosRestInterface methodsFor: 'private' stamp: 'L 6/17/2018 19:08:51'!
addItemstoPurchaseList:aCartID toThisClient:aClientID

! !

!TusLibrosRestInterface methodsFor: 'private' stamp: 'ABC 6/14/2018 21:29:38'!
getActiveCarts

	^ activeCarts .! !

!TusLibrosRestInterface methodsFor: 'private' stamp: 'ABC 6/17/2018 00:10:29'!
getCart: aCartID
	^ activeCarts at: aCartID.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosRestInterface class' category: #TusLibros!
TusLibrosRestInterface class
	instanceVariableNames: ''!

!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'ABC 6/14/2018 21:21:06'!
initializeWith:aCatalog

	^ self class new initializeWith: aCatalog .! !

!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'ABC 6/14/2018 20:19:19'!
invalidPasswordErrorMessage

	^ ' Password Invalida '.! !

!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'ABC 6/14/2018 20:23:28'!
invalidUserErrorMessage

	^ ' Usuario Invalido '.! !
