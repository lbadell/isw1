Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !Object subclass: #ClassMapping	instanceVariableNames: 'mappedClass mappings tableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ClassMapping methodsFor: 'table' stamp: 'HernanWilkinson 10/31/2016 23:25'!tableName		^tableName ! !!ClassMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:25'!initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings	mappedClass := aClass.	tableName := aTableName.	mappings := aCollectionOfMappings ! !!ClassMapping methodsFor: 'testing' stamp: 'HernanWilkinson 10/31/2016 23:02'!isFor: aClass	^mappedClass = aClass! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapIdOf: anObject into: record using: aDataBaseSession	| newId |	newId := aDataBaseSession newIdFor: anObject.	anObject instVarNamed: #id put: newId.	record at: #id put: newId! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmap: aRecord into: unMappedObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping unmap: aRecord into: unMappedObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmapIdOf: aRecord into: unMappedObject	unMappedObject instVarNamed: #id put: (aRecord at: #id)! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping mapOneToManyRelationshipsOf: anObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapEmbededOf: anObject into: record	mappings do: [ :aMapping | aMapping embeded: anObject into: record ]! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:42'!unmap: aRecord using: aDataBaseSession	| unMappedObject |	unMappedObject := mappedClass basicNew.	self unmapIdOf: aRecord into: unMappedObject.	self unmap: aRecord into: unMappedObject using: aDataBaseSession.	^ unMappedObject! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:40'!map: anObject using: aDataBaseSession	| record |	self toDo: 'se puede optimizar usando array para registros y guardando definicion de tabla una vez'.	record := Dictionary new.		self mapIdOf: anObject into: record using: aDataBaseSession.	self mapEmbededOf: anObject into: record.	"agrego aca el registro y no luego de mapear el id para que lo agrege completo. Lo agrego antes de mapear las rel one to many 	porque si usuara una db de verdad habria foreign key constrain"	aDataBaseSession add: record on: self tableName.	self mapOneToManyRelationshipsOf: anObject using: aDataBaseSession! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClassMapping class	instanceVariableNames: ''!!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:44'!defaultTableNameFor: aClass		^aClass name asString! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:23'!withDefaultTableNameFor: aClass mappingAll: aCollectionOfMappings	^self for: aClass into: (self defaultTableNameFor: aClass) mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:24'!for: aClass into: aTableName mappingAll: aCollectionOfMappings	self assertValidTableName: aTableName.	self assertHasIdInstanceVariable: aClass.	self assertValidMappings: aCollectionOfMappings for: aClass.		^self new initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 21:15'!assertHasIdInstanceVariable: aClass 		(aClass hasInstVarNamed: #id) ifFalse: [ self error: ('<1s> has no id instance variable' expandMacrosWith: aClass name) ]! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 19:26'!assertValidMappings: aCollectionOfMappings for: aClass 	self toDo: 'Lo mejor seria recolectar todos los erroes de mapeo y no parar en el primero'.	aCollectionOfMappings do: [ :aMapping | aMapping assertIsValidFor: aClass ]	! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidTableName: aTableName	aTableName trimBoth isEmpty ifTrue: [ self error: 'Table name can not be empty' ]! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:21'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:10'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/3/2016 09:21'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:51'!setUp	system := Environment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:52'!tearDown	system commit.	system shutdown! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/4/2016 09:27'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream using: system) import! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/1/2018 20:28'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutOwnerErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !Object subclass: #DataBaseSession	instanceVariableNames: 'configuration tables id cache'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:35'!defineIdOf: anObject	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:41'!delay	(Delay forMilliseconds: 100) wait! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:15'!objectIdentifiedAs: anId ofType: aClass	self assertInTransaction.	self delay.		^ cache at: anId ifAbsentPut: [ self unmapRecordIdentifiedAs: anId ofType: aClass ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:26'!select: aCondition ofType: aClass	| mapper table |	self assertInTransaction.	self delay.		mapper := self mapperFor: aClass.	table := tables at: mapper tableName ifAbsent: [ ^ #() ].		^ table inject: OrderedCollection new into: [ :selected :record | self addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 10/31/2016 22:17'!selectAllOfType: aClass 		^self select: [ :anObject | true ] ofType: aClass! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:00'!idOf: anObject	^anObject instVarNamed: #id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 10/28/2016 16:35'!newIdFor: anObject	id := id + 1.	^id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:04'!recordId: aRecord	^aRecord at: #id! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	self assertIsClose.		tables := Dictionary new.	! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:36'!assertIsOpen		tables isNil ifTrue: [ self error: 'Session must be open to colaborate with it' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:37'!assertIsClose		tables isNil ifFalse: [ self error: 'Session must be close' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	self assertIsOpen.		tables := nil! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertInTransaction		cache isNil ifTrue: [ self error: 'There is no transaction currently' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertNotInTransasction		cache notNil ifTrue: [ self error: 'There is an open transaction already' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!commit		self assertInTransaction.		cache := nil! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!beginTransaction	self assertIsOpen.	self assertNotInTransasction.		cache := WeakKeyDictionary new.	! !!DataBaseSession methodsFor: 'selecting - private' stamp: 'HernanWilkinson 11/1/2016 01:28'!addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper	| recordId aClassInstance |	recordId := self recordId: record.	aClassInstance := cache at: recordId ifAbsent: [ mapper unmap: record using: self ].	(aCondition value: aClassInstance) ifTrue: [ 		self addToCache: aClassInstance.		selected add: aClassInstance ].		^ selected! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableFor: anOwnerClass relatedTo: aRelatedClass	| relationTableName table |	relationTableName := self relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass.	table := self tableNamed: relationTableName.		^ table! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 00:48'!tableNamed: aTableName	^ tables at: aTableName ifAbsentPut: [ Dictionary new ]! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass	| ownerClassMapper relatedClassMapper |		ownerClassMapper := self mapperFor: anOwnerClass.	relatedClassMapper := self mapperFor: aRelatedClass.		^ownerClassMapper tableName,'_', relatedClassMapper tableName asPlural.! !!DataBaseSession methodsFor: 'persistance' stamp: 'HernanWilkinson 11/1/2016 01:28'!persist: anObject	| mapper |		self assertInTransaction.	self delay.		mapper := self mapperFor: anObject class.	mapper map: anObject using: self.		self addToCache: anObject ! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:15'!relatedOfType: aRelatedClass for: anOwner	| table relatedIds |		table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := table at: (self idOf: anOwner) ifAbsent: [ ^#() ].		^relatedIds collect: [ :aRelatedId | self objectIdentifiedAs: aRelatedId ofType: aRelatedClass ]		! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:16'!unmapRecordIdentifiedAs: anId ofType: aClass	| record table mapper |	mapper := self mapperFor: aClass.	table := self tableNamed: mapper tableName.	record := table at: id ifAbsent: [ self error: ('Object identified as <1s> does not exist' expandMacrosWith: anId printString) ].		^ mapper unmap: record using: self! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:14'!mapperFor: aClass	self toDo: 'se puede mejorar performanco usando un dictionary'.	^configuration		detect: [ :aClassMapper | aClassMapper isFor: aClass ] 		ifNone: [ self error: ('There is no mapper for <1s>' expandMacrosWith: aClass name) ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!addRelated: aRelated ownedBy: anOwner	| relatedIds relatedId |	relatedIds := self relatedIdsOwnedBy: anOwner forType: aRelated class.	relatedId := aRelated instVarNamed: #id.	self assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds.		relatedIds add: relatedId! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:27'!addToCache: anObject 	cache at: (self idOf: anObject) put: anObject ! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:05'!assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds	(relatedIds includes: relatedId) ifTrue: [ self signalRelationAlreadyExistBetween: anOwner and: aRelated ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!add: aRecord on: aTableName	| table existingRecord |	table := self tableNamed: aTableName.	existingRecord := table at: (self recordId: aRecord) ifAbsentPut: [ aRecord ].	existingRecord == aRecord ifFalse: [ self error: 'Duplicated primary key' ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:10'!relatedIdsOwnedBy: anOwner forType: aRelatedClass	| relatedIds table |	table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := self relatedIdOwnedBy: anOwner on: table.		^ relatedIds! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:06'!relatedIdOwnedBy: anOwner on: table	^ table at: (self idOf: anOwner) ifAbsentPut: [ Set new ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:00'!signalRelationAlreadyExistBetween: anOwner and: aRelated 	self error: ('Relation between id <1s> of type <2s> and id <3s> of type <4s> already exist'		expandMacrosWith: (self idOf: anOwner) printString		with: anOwner class name		with: (self idOf: aRelated) printString		with: aRelated class name)! !!DataBaseSession methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 22:55'!initializeFor: aConfiguration	configuration := aConfiguration.	id := 0.	tables := nil.	cache := nil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DataBaseSession class	instanceVariableNames: ''!!DataBaseSession class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/28/2016 13:07'!for: aConfiguration	^self new initializeFor: aConfiguration! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:49'!createCustomerSystem	self subclassResponsibility ! !!Environment methodsFor: 'system creation' stamp: 'AlexisBalbachan 7/1/2018 18:38'!createSupplierSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelpmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelpmentEnvironment methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!createCustomerSystem		^TransientCustomerSystem new! !!DevelpmentEnvironment methodsFor: 'as yet unclassified' stamp: 'AlexisBalbachan 7/1/2018 18:37'!createSupplierSystem		^TransientSupplierSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelpmentEnvironment class	instanceVariableNames: ''!!DevelpmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Object subclass: #IdentificableEntityWithAddress	instanceVariableNames: 'identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IdentificableEntityWithAddress methodsFor: 'addresses' stamp: 'AlexisBalbachan 7/1/2018 19:33'!addAddress: anAddress 	addresses add: anAddress ! !!IdentificableEntityWithAddress methodsFor: 'addresses' stamp: 'AlexisBalbachan 7/1/2018 19:33'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!IdentificableEntityWithAddress methodsFor: 'addresses' stamp: 'AlexisBalbachan 7/1/2018 19:33'!addressesIsEmpty		^addresses isEmpty! !!IdentificableEntityWithAddress methodsFor: 'addresses' stamp: 'AlexisBalbachan 7/1/2018 19:33'!addresses	^ addresses! !!IdentificableEntityWithAddress methodsFor: 'addresses' stamp: 'AlexisBalbachan 7/1/2018 19:34'!numberOfAddresses		^addresses size! !!IdentificableEntityWithAddress methodsFor: 'identification' stamp: 'AlexisBalbachan 7/1/2018 19:34'!identificationType		^identificationType ! !!IdentificableEntityWithAddress methodsFor: 'identification' stamp: 'AlexisBalbachan 7/1/2018 19:34'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !!IdentificableEntityWithAddress methodsFor: 'identification' stamp: 'AlexisBalbachan 7/1/2018 19:34'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!IdentificableEntityWithAddress methodsFor: 'identification' stamp: 'AlexisBalbachan 7/1/2018 19:34'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!IdentificableEntityWithAddress methodsFor: 'identification' stamp: 'AlexisBalbachan 7/1/2018 19:34'!identificationNumber		^identificationNumber ! !!IdentificableEntityWithAddress methodsFor: 'initialization' stamp: 'AlexisBalbachan 7/1/2018 19:34'!initialize	super initialize.	addresses := OrderedCollection new.! !IdentificableEntityWithAddress subclass: #Customer	instanceVariableNames: 'id firstName lastName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'AlexisBalbachan 7/1/2018 21:15'!isNamed: aName	^ firstName = aName.! !Object subclass: #Importer	instanceVariableNames: 'line readStream record system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Importer methodsFor: 'importing - private' stamp: 'AlexisBalbachan 7/1/2018 19:14'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!Importer methodsFor: 'importing - private' stamp: 'AlexisBalbachan 7/1/2018 19:12'!importRecord
	self subclassResponsibility! !!Importer methodsFor: 'importing - private' stamp: 'AlexisBalbachan 7/1/2018 19:13'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!Importer methodsFor: 'importing - private' stamp: 'AlexisBalbachan 7/1/2018 19:14'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!Importer methodsFor: 'importing' stamp: 'AlexisBalbachan 7/1/2018 19:16'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!Importer methodsFor: 'error signal' stamp: 'AlexisBalbachan 7/1/2018 19:15'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!Importer methodsFor: 'initialization' stamp: 'AlexisBalbachan 7/1/2018 19:15'!initializeOn: aReadStream using: aSystem	readStream := aReadStream.	system := aSystem! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Importer class	instanceVariableNames: ''!!Importer class methodsFor: 'instance creation' stamp: 'AlexisBalbachan 7/1/2018 19:16'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !!Importer class methodsFor: 'error descriptions' stamp: 'AlexisBalbachan 7/1/2018 19:15'!invalidRecordTypeErrorDescription		^'Invalid record type'! !Importer subclass: #CustomerImporter	instanceVariableNames: 'newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/1/2018 20:37'!importCustomer	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	self addCustomer! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/1/2018 20:37'!addCustomer	system add: newCustomer! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'AlexisBalbachan 7/1/2018 20:24'!addAddress: newAddress	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'AlexisBalbachan 7/1/2018 20:26'!importAddress	| newAddress |	self assertAddressHasOwner.	self assertValidAddressRecordSize.	newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ self addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'AlexisBalbachan 7/1/2018 20:27'!assertAddressHasOwner	newCustomer isNil ifTrue: [ self signalAddressWithoutOwner ].	! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'AlexisBalbachan 7/1/2018 20:28'!signalAddressWithoutOwner	self error: self class addressWithoutOwnerErrorDescription.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'AlexisBalbachan 7/1/2018 20:28'!addressWithoutOwnerErrorDescription		^'There is no owner for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:45'!createCustomerSystem		^PersistentCustomerSystem new! !!IntegrationEnvironment methodsFor: 'system creation' stamp: 'AlexisBalbachan 7/2/2018 00:47'!createSupplierSystem		^PersistentSupplierSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!not	self shouldBeImplemented.! !!IntegrationEnvironment class methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:53'!isCurrent		^false! !Object subclass: #Mapping	instanceVariableNames: 'instanceVariableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!embeded: anObject into: aRecord	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!unmap: aRecord into: anObject using: aDataBaseSession	self subclassResponsibility! !!Mapping methodsFor: 'assertions' stamp: 'HernanWilkinson 11/1/2016 01:31'!assertIsValidFor: aClass 	(aClass hasInstVarNamed: instanceVariableName) ifFalse: [ 		self error: ('Invalid mapping for <1s> in class <2s>' expandMacrosWith: instanceVariableName with: aClass name) ] ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mapping class	instanceVariableNames: ''!!Mapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 01:32'!defaultFieldNameFor: anInstanceVariableName	^anInstanceVariableName asString! !!Mapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidFieldName: aFieldName	aFieldName trimBoth isEmpty ifTrue: [ self error: 'Field name can not be empty' ]! !Mapping subclass: #EmbededMapping	instanceVariableNames: 'fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:23'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession 		! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!embeded: anObject into: aRecord	aRecord at: fieldName put: (anObject instVarNamed: instanceVariableName) ! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!unmap: aRecord into: anObject using: aDataBaseSession 	anObject instVarNamed: instanceVariableName put: (aRecord at: fieldName)! !!EmbededMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:30'!initializeFor: anInstanceVariableName into: aFieldName	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmbededMapping class	instanceVariableNames: ''!!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:30'!for: anInstanceVariableName into: aFieldName	^self new initializeFor: anInstanceVariableName into: aFieldName ! !!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:29'!withDefaultFieldNameFor: anInstanceVariableName	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName)! !Mapping subclass: #OneToManyMapping	instanceVariableNames: 'relatedType fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:35'!createRelationCollectionOn: aDataBaseSession ownedBy: anObject	^ OneToManySet on: aDataBaseSession ownedBy: anObject! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	| oldCollection newCollection |	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	oldCollection := anObject instVarNamed: instanceVariableName.		newCollection addAll: oldCollection.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:16'!embeded: anObject into: aRecord	! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!unmap: aRecord into: anObject using: aDataBaseSession	| newCollection related |	related := aDataBaseSession relatedOfType: relatedType for: anObject.	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	newCollection addAllNotPersisting: related.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:34'!initializeFor: anInstanceVariableName into: aFieldName ofType: aClass	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName.	relatedType := aClass ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManyMapping class	instanceVariableNames: ''!!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:32'!withDefaultFieldNameFor: anInstanceVariableName ofType: aClass	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName) ofType: aClass! !!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:40'!for: anInstanceVariableName into: aFieldName ofType: aClass	self assertValidFieldName: aFieldName.		^self new initializeFor: anInstanceVariableName into: aFieldName ofType: aClass! !Set subclass: #OneToManySet	instanceVariableNames: 'session owner'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!OneToManySet methodsFor: 'initialization' stamp: 'HernanWilkinson 11/1/2016 00:11'!initializeOn: aDataBaseSession ownedBy: anOwner		session := aDataBaseSession.	owner := anOwner ! !!OneToManySet methodsFor: 'removing' stamp: 'HernanWilkinson 10/31/2016 21:35'!remove: anObject ifAbsent: anAbsentBlock	self shouldBeImplemented ! !!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:03'!addAllNotPersisting: aCollection 		^aCollection do: [ :anObjectToAdd | super add: anObjectToAdd ]! !!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:11'!add: anObject	session persist: anObject.	session addRelated: anObject ownedBy: owner.		super add: anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManySet class	instanceVariableNames: ''!!OneToManySet class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:11'!on: aDataBaseSession ownedBy: anOwner		^self new initializeOn: aDataBaseSession ownedBy: anOwner ! !Object subclass: #StorageSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!StorageSystem methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 18:30'!add: anItem	self subclassResponsibility! !!StorageSystem methodsFor: 'system live cycle' stamp: 'AlexisBalbachan 7/1/2018 18:24'!start	self subclassResponsibility! !!StorageSystem methodsFor: 'system live cycle' stamp: 'AlexisBalbachan 7/1/2018 18:24'!shutdown	self subclassResponsibility! !!StorageSystem methodsFor: 'transaction' stamp: 'AlexisBalbachan 7/1/2018 18:31'!beginTransaction	self subclassResponsibility! !!StorageSystem methodsFor: 'transaction' stamp: 'AlexisBalbachan 7/1/2018 18:25'!commit	self subclassResponsibility! !StorageSystem subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 18:25'!customersIsEmpty	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!allCustomers	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 18:25'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!commit	session commit! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:18'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	customers size = 1		ifFalse: [ self error: 'No o more that one customer found' ].	^ customers anyOne! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:18'!allCustomers	^ session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/3/2016 09:11'!customersIsEmpty	^ self allCustomers isEmpty! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:33'!add: aCustomer	session persist: aCustomer! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	session start! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	session shutdown! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/3/2016 08:54'!initialize		super initialize.	self initializeSession. ! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:19'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping)! !IdentificableEntityWithAddress subclass: #Supplier	instanceVariableNames: 'id name customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'name' stamp: 'AlexisBalbachan 7/1/2018 19:36'!supplierName	^ name! !!Supplier methodsFor: 'name' stamp: 'AlexisBalbachan 7/1/2018 19:37'!supplierName: aName	name := aName.! !!Supplier methodsFor: 'initialization' stamp: 'AlexisBalbachan 7/1/2018 19:50'!initialize	super initialize.	customers := OrderedCollection new.! !!Supplier methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 19:51'!addCustomer: aCustomer	customers add: aCustomer.! !!Supplier methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 19:53'!numberOfCustomers		^customers size! !!Supplier methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 19:52'!customers	^ customers copy! !!Supplier methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 19:53'!customersIsEmpty	^ customers isEmpty.! !!Supplier methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 21:15'!customersNamed: aCustomerName ifNone: noneClosure 		^customers detect: [ :aCustomer | aCustomer isNamed: aCustomerName ] ifNone: noneClosure ! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'initialization' stamp: 'AlexisBalbachan 7/1/2018 18:19'!setUp	system := Environment current createSupplierSystem.	system start.	system beginTransaction! !!SupplierImportTest methodsFor: 'initialization' stamp: 'AlexisBalbachan 7/1/2018 18:19'!tearDown	system commit.	system shutdown! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/1/2018 21:33'!validTestDataOnlyClients	^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Juan,Perez,C,23-25666777-9NC,Pepe,Sanchez,Z,3588965'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/2/2018 00:07'!newCustomerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Pepe,Sanchez,D,123,EXTRA'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/2/2018 00:11'!existingCustomerRecordWithLessThanThreeFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'EC,D'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/2/2018 00:03'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/1/2018 21:22'!alwaysImportedSupplierRecord	^'S,Pepito SA,Q,789654'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/2/2018 00:11'!existingCustomerRecordWithMoreThanThreeFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'EC,D,1518,EXTRA'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/2/2018 00:01'!validTestDataOnlySupplier	^ ReadStream on: self alwaysImportedSupplierRecord! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/2/2018 00:06'!newCustomerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Pepe,Sanchez,D'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/1/2018 21:16'!validTestDataComplete	^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresNC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/2/2018 00:00'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AlexisBalbachan 7/1/2018 21:16'!validTestDataOnlyAddresses	^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresA,Alem,1122,CABA,1001,CABA'! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:21'!testCanNotImportSupplierWithLessThanFourFields		self		should: [ self importSuppliersFrom: (ReadStream on: 'S,Supplier2,A'). ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assertNoSuppliers ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:11'!testCanNotImportExistingCustomerRecordWithLessThanThreeFields		self		should: [ self importSuppliersFrom: self existingCustomerRecordWithLessThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assertAlwaysImportedSupplierWasImportedAlone ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/1/2018 19:18'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream using: system) import! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:32'!testCanNotImportExistingCustomerWithoutSupplier	self importSuppliersFrom: self validTestDataOnlyClients.	self		should: [ self importSuppliersFrom: (ReadStream on: 'EC,Z,3588965'). ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter customerWithoutOwnerErrorDescription.			self assertAlwaysImportedSupplierWasImportedWithItsClients ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:11'!testCanNotImportExistingCustomerRecordWithMoreThanThreeFields		self		should: [ self importSuppliersFrom: self existingCustomerRecordWithMoreThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assertAlwaysImportedSupplierWasImportedAlone ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/1/2018 23:48'!testCanNotImportNonExistingClients	|supplier|		self importSuppliersFrom: self validTestDataOnlyClients.		self should: [ self importSuppliersFrom: (ReadStream on: 'S,Supplier1,D,123EC,A,1').]	raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter customerDoesNotExistErrorDescription.			self assertImportedSuppliersSizeIs: 2.			self assertAlwaysImportedSupplierWasImportedWithItsClients.				supplier := system supplierIdentifiedAs: 'D' numbered: '123'.				self assert: supplier isNamed: 'Supplier1' identfiedAs: 'D' withNumber: '123'.			self assert: supplier numberOfCustomers = 0. 		].! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/1/2018 23:39'!testCanAddSupplierWithExistingClients	|supplier|		self importSuppliersFrom: self validTestDataOnlyClients.	self importSuppliersFrom: (ReadStream on: 'S,Supplier1,D,123EC,Z,3588965').	self assertImportedSuppliersSizeIs: 2.	self assertAlwaysImportedSupplierWasImportedWithItsClients.		supplier := system supplierIdentifiedAs: 'D' numbered: '123'.		self assert: supplier isNamed: 'Supplier1' identfiedAs: 'D' withNumber: '123'.	self assert: supplier hasCustomerNamed: 'Pepe' lastName: 'Sanchez' identifiedWith: 'Z'  andNumber: '3588965'! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/1/2018 18:21'!testNewSystemIsEmpty	self assertNoSuppliers.! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:04'!testCanNotImportAddressRecordWithMoreThanSixFields		self		should: [ self importSuppliersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assertAlwaysImportedSupplierWasImportedAlone ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:30'!testCanNotImportNewCustomerWithoutSupplier		self		should: [ self importSuppliersFrom: (ReadStream on: 'NC,Pepe,Sanchez,D,1234'). ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter customerWithoutOwnerErrorDescription.			self assertNoSuppliers ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/1/2018 21:32'!testCanAddSupplierWithNewClients	self importSuppliersFrom: self validTestDataOnlyClients.	self assertImportedSuppliersSizeIs: 1.	self assertAlwaysImportedSupplierWasImportedWithItsClients.! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:06'!testCanNotImportCustomerRecordWithLessThanFiveFields		self		should: [ self importSuppliersFrom: self newCustomerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assertAlwaysImportedSupplierWasImportedAlone ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:22'!testCanNotImportUnknownRecordType		self		should: [ self importSuppliersFrom: (ReadStream on: 'Z,Supplier2,A,123123,EXTRA'). ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assertNoSuppliers ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/1/2018 23:59'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importSuppliersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assertAlwaysImportedSupplierWasImportedAlone ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:21'!testCanNotImportSupplierWithMoreThanFourFields		self		should: [ self importSuppliersFrom: (ReadStream on: 'S,Supplier2,A,123123,EXTRA'). ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assertNoSuppliers ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:02'!testCanAddTwoSuppliers	self		importSuppliersFrom: (ReadStream on: self alwaysImportedSupplierRecord ,'S,Supplier2,A,123456').	self assertImportedSuppliersSizeIs: 2.	self assertAlwaysImportedSupplierWasImportedAlone.	self assertSupplier2WasImportedCorrectly.! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:01'!testCanAddSingleSupplier	self importSuppliersFrom: self validTestDataOnlySupplier.	self assertImportedSuppliersSizeIs: 1.	self assertAlwaysImportedSupplierWasImportedAlone.! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:07'!testCanNotImportCustomerRecordWithMoreThanFiveFields		self		should: [ self importSuppliersFrom: self newCustomerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assertAlwaysImportedSupplierWasImportedAlone ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/2/2018 00:26'!testCanNotImportAddressWithoutSupplier		self		should: [ self importSuppliersFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636'). ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter addressWithoutOwnerErrorDescription.			self assertNoSuppliers ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'AlexisBalbachan 7/1/2018 21:28'!testCanAddSupplierWithAddresses	self importSuppliersFrom: self validTestDataOnlyAddresses.	self assertImportedSuppliersSizeIs: 1.	self assertAlwaysImportedSupplierWasImportedWithItsAddresses.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:03'!assert: supplier hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := supplier addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:34'!supplierHasClientsThatBelongToPepitoSA: supplier	self assert: supplier numberOfCustomers = 2.	self		assert: supplier		hasCustomerNamed: 'Juan'		lastName: 'Perez'		identifiedWith: 'C'		andNumber: '23-25666777-9'.	self		assert: supplier		hasCustomerNamed: 'Pepe'		lastName: 'Sanchez'		identifiedWith: 'Z'		andNumber: '3588965'! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:30'!supplierHasAddressesThatBelongToPepitoSA: supplier	self assert: supplier numberOfAddresses = 3.	self		assert: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: supplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'.	self		assert: supplier		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:34'!assertAlwaysImportedSupplierWasImportedWithItsClients	| supplier idType idNumber |	idType := 'Q'.	idNumber := '789654'.	supplier := system supplierIdentifiedAs: idType numbered: idNumber.		self supplierIsPepitoSA: supplier.	self supplierHasClientsThatBelongToPepitoSA: supplier.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:14'!assert: supplier hasCustomerNamed: aFirstName lastName: aLastName identifiedWith: anIdentificationType andNumber: anIdentificationNumber	| customer |		customer := supplier customersNamed: aFirstName ifNone: [ self fail ].	self assert: customer firstName equals: aFirstName.	self assert: customer lastName equals: aLastName.	self assert: customer identificationType equals: anIdentificationType.	self assert: customer identificationNumber equals: anIdentificationNumber.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:26'!assertAlwaysImportedSupplierWasImportedCorrectly	| supplier idType idNumber |	idType := 'Q'.	idNumber := '789654'.	supplier := system supplierIdentifiedAs: idType numbered: idNumber.	self supplierIsPepitoSA: supplier.	self supplierHasAddressesThatBelongToPepitoSA: supplier.	self supplierHasClientsThatBelongToPepitoSA: supplier! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 23:58'!assertAlwaysImportedSupplierWasImportedAlone	| supplier idType idNumber |	idType := 'Q'.	idNumber := '789654'.	supplier := system supplierIdentifiedAs: idType numbered: idNumber.		self supplierIsPepitoSA: supplier.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 18:39'!assertNoSuppliers	self assert: system suppliersIsEmpty! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:26'!assertAlwaysImportedSupplierWasImportedWithItsAddresses	| supplier idType idNumber |	idType := 'Q'.	idNumber := '789654'.	supplier := system supplierIdentifiedAs: idType numbered: idNumber.		self supplierIsPepitoSA: supplier.	self supplierHasAddressesThatBelongToPepitoSA: supplier.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:29'!assertSupplier2WasImportedCorrectly	| supplier idType idNumber |	idType := 'A'.	idNumber := '123456'.	supplier := system supplierIdentifiedAs: idType numbered: idNumber.		self assert: supplier isNamed: 'Supplier2' identfiedAs: idType withNumber: idNumber! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:30'!supplierIsPepitoSA: supplier	self		assert: supplier		isNamed: 'Pepito SA'		identfiedAs: 'Q'		withNumber: '789654'! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 21:29'!assert: supplier isNamed: supplierName identfiedAs: idType withNumber: idNumber	self assert: supplier supplierName equals: supplierName.	self assert: supplier identificationType equals: idType.	self assert: supplier identificationNumber equals: idNumber.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AlexisBalbachan 7/1/2018 20:05'!assertImportedSuppliersSizeIs: aSize	self assert: system allSuppliers size equals: aSize! !CustomerImporter subclass: #SupplierImporter	instanceVariableNames: 'newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'error signal' stamp: 'AlexisBalbachan 7/1/2018 19:24'!signalInvalidSupplierRecord 		self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'AlexisBalbachan 7/2/2018 00:28'!signalCustomerWithoutOwner		self error: self class customerWithoutOwnerErrorDescription.! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'AlexisBalbachan 7/1/2018 20:27'!assertAddressHasOwner	newSupplier isNil ifTrue: [ self signalAddressWithoutOwner ].! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'AlexisBalbachan 7/1/2018 20:29'!addAddress: anAddress	^ newSupplier addAddress: anAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'AlexisBalbachan 7/2/2018 00:27'!assertCustomerHasOwner	newSupplier isNil ifTrue: [ self signalCustomerWithoutOwner ].! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'AlexisBalbachan 7/1/2018 19:21'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'AlexisBalbachan 7/1/2018 22:01'!importSupplier	self assertValidSupplierRecordSize.	newSupplier := Supplier new.	newSupplier supplierName: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.	system add: newSupplier! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'AlexisBalbachan 7/1/2018 19:23'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].! !!SupplierImporter methodsFor: 'importing - private' stamp: 'AlexisBalbachan 7/1/2018 23:13'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isAddressRecord ifTrue:  [ ^self importAddress ].	self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExistingCustomerRecord ifTrue: [ ^self importExistingCustomer ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/1/2018 20:42'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/1/2018 23:29'!importNewCustomer	self importCustomer.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/1/2018 23:27'!assertCustomerExists	newCustomer := system customerIdentifiedAs: record second numbered: record third ifNotExistsDo:  [ ^ self error: self class customerDoesNotExistErrorDescription  ]! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/2/2018 00:09'!assertValidExistingCustomerRecordSize	record size ~= 3 ifTrue: [ self signalInvalidCustomerRecord ].! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/2/2018 00:08'!importExistingCustomer	self assertValidExistingCustomerRecordSize.	self assertCustomerExists.	self addCustomer.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/2/2018 00:29'!addCustomer	self assertCustomerHasOwner.	newSupplier addCustomer: newCustomer.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'AlexisBalbachan 7/1/2018 23:14'!isExistingCustomerRecord	^ record first = 'EC'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'error descriptions' stamp: 'AlexisBalbachan 7/1/2018 19:25'!invalidSupplierRecordErrorDescription 	^ 'Invalid supplier record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'AlexisBalbachan 7/2/2018 00:28'!customerWithoutOwnerErrorDescription	^ 'Customer does not have an owner'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'AlexisBalbachan 7/1/2018 23:25'!customerDoesNotExistErrorDescription	^ 'Customer does not exist'! !StorageSystem subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/1/2018 18:29'!allSuppliers	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/1/2018 18:32'!suppliersIsEmpty	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/1/2018 18:32'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 23:23'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNotExistsDo: aBlock	self subclassResponsibility! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'AlexisBalbachan 7/2/2018 00:36'!initialize		super initialize.	self initializeSession. ! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'AlexisBalbachan 7/2/2018 00:40'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping)! !!PersistentSupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/2/2018 00:40'!allSuppliers	^ session selectAllOfType: Supplier! !!PersistentSupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/2/2018 00:44'!suppliersIsEmpty	^ self allSuppliers isEmpty! !!PersistentSupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/2/2018 00:46'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| suppliers |	suppliers := session		select: [ :aSupplier | 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber ] ]		ofType: Supplier.	suppliers size = 1		ifFalse: [ self error: 'No o more that one supplier found' ].	^ suppliers anyOne! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'AlexisBalbachan 7/2/2018 00:38'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'AlexisBalbachan 7/2/2018 00:38'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber))! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'AlexisBalbachan 7/2/2018 00:39'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #supplierName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'transaction' stamp: 'AlexisBalbachan 7/2/2018 00:41'!commit	session commit! !!PersistentSupplierSystem methodsFor: 'transaction' stamp: 'AlexisBalbachan 7/2/2018 00:41'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'adding' stamp: 'AlexisBalbachan 7/2/2018 00:43'!add: aSupplier	session persist: aSupplier! !!PersistentSupplierSystem methodsFor: 'system live cycle' stamp: 'AlexisBalbachan 7/2/2018 00:43'!start	session start! !!PersistentSupplierSystem methodsFor: 'system live cycle' stamp: 'AlexisBalbachan 7/2/2018 00:43'!shutdown	session shutdown! !!PersistentSupplierSystem methodsFor: 'enumerating' stamp: 'AlexisBalbachan 7/2/2018 00:42'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNotExistsDo: aBlock	| suppliers |		suppliers := self allSuppliers.		suppliers do: [ :aSupplier | aSupplier customers do:[ :aCustomer | ((aCustomer identificationType = anIdentifycationType) and: [ aCustomer identificationNumber = anIdentificationNumber ]) ifTrue: [ ^ aCustomer ]    ]].		^aBlock value.! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!commit		! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!beginTransaction		! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown		! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:40'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!allCustomers	^ customers copy! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:40'!customersIsEmpty	^ customers isEmpty ! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!add: aCustomer	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:41'!initialize		customers := OrderedCollection new! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'AlexisBalbachan 7/1/2018 22:01'!start! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'AlexisBalbachan 7/1/2018 22:01'!shutdown! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/1/2018 18:34'!allSuppliers	^ suppliers copy.! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/1/2018 18:35'!suppliersIsEmpty	^ suppliers isEmpty.! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/1/2018 19:47'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^suppliers detect: [ :aSupplier | aSupplier isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'AlexisBalbachan 7/1/2018 19:39'!add: aSupplier	suppliers add: aSupplier! !!TransientSupplierSystem methodsFor: 'initialization' stamp: 'AlexisBalbachan 7/1/2018 22:01'!initialize		suppliers := OrderedCollection new.! !!TransientSupplierSystem methodsFor: 'transaction' stamp: 'AlexisBalbachan 7/1/2018 22:01'!beginTransaction! !!TransientSupplierSystem methodsFor: 'transaction' stamp: 'AlexisBalbachan 7/1/2018 22:01'!commit! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'AlexisBalbachan 7/1/2018 23:26'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNotExistsDo: aBlock		suppliers do: [ :aSupplier | aSupplier customers do:[ :aCustomer | ((aCustomer identificationType = anIdentifycationType) and: [ aCustomer identificationNumber = anIdentificationNumber ]) ifTrue: [ ^ aCustomer ]    ]].		^aBlock value.! !'From Pharo6.0 of 13 May 2016 [Latest update: #60541] on 2 July 2018 at 12:55:02.428389 am'!!String methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 23:57'!asPlural		^self last = $s 		ifTrue: [ self, 'es' ]		ifFalse: [ self, 's' ]! !'From Pharo6.0 of 13 May 2016 [Latest update: #60541] on 2 July 2018 at 12:55:02.428853 am'!!Object methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 19:27'!toDo: aString 	! !